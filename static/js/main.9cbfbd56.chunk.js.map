{"version":3,"sources":["logo.svg","components/device-orientation.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DeviceOrientation","state","absolute","alpha","beta","gamma","isSupported","errMsg","handleOrientation","event","setState","listenToDeviceOrientationEvents","console","log","window","addEventListener","DeviceOrientationEvent","this","requestPermission","then","response","catch","err","error","removeEventListener","props","children","Component","defaultProps","App","val","Number","toFixed","className","src","logo","alt","href","target","rel","formatAngleData","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9cbfbd56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class DeviceOrientation extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n  };\n\n  static defaultProps = {\n    children: () => null,\n  };\n\n  state = {\n    absolute: true,\n    alpha: 0,\n    beta: 0,\n    gamma: 0,\n    isSupported: '',\n    errMsg: 'none'\n  };\n\n  handleOrientation = event => {\n    const { absolute, alpha, beta, gamma } = event;\n\n    this.setState({ absolute, alpha, beta, gamma });\n  };\n\n  componentDidMount() {\n    if (window.DeviceOrientationEvent && 'ontouchstart' in window) {\n      // DeviceOrientationEvent supported\n      console.log('DeviceOrientationEvent supported');\n      this.setState({\n        isSupported: 'Yes'\n      });\n      if (typeof DeviceOrientationEvent.requestPermission === 'function') {\n        // iOS 13+\n        console.log('Requesting permission to use deviceorientation');\n        DeviceOrientationEvent.requestPermission()\n          .then(response => {\n            if (response === 'granted') {\n              this.listenToDeviceOrientationEvents();\n            }\n          })\n          .catch((err) => {\n            console.error(err);\n            this.setState({\n              errMsg: 'iOS 13+: error requesting permission'\n            });\n          });\n      } else {\n        // non iOS 13+\n        this.listenToDeviceOrientationEvents();\n      }\n    } else {\n      // DeviceOrientationEvent NOT supported\n      console.log('DeviceOrientationEvent NOT supported');\n      this.setState({\n        isSupported: 'No'\n      });\n    }\n  }\n\n  listenToDeviceOrientationEvents = () => {\n    console.log('Adding event deviceorientation listener');\n    window.addEventListener('deviceorientation', this.handleOrientation, true);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      'deviceorientation',\n      this.handleOrientation,\n      true\n    );\n  }\n\n  render() {\n    return this.props.children(this.state);\n  }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { DeviceOrientation } from './components/device-orientation.component';\n\nclass App extends Component {\n\n  formatAngleData(val) {\n    return Number(val).toFixed(2);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <DeviceOrientation>\n            {({ absolute, alpha, beta, gamma, errMsg, isSupported }) => (\n              <div>\n                <div>\n                  {`Absolute: ${absolute}`}\n                </div>\n                <div>\n                  {`Alpha: ${this.formatAngleData(alpha)}`}\n                </div>\n                <div>\n                  {`Beta: ${this.formatAngleData(beta)}`}\n                </div>\n                <div>\n                  {`Gamma: ${this.formatAngleData(gamma)}`}\n                </div>\n                <div>\n                  {`isSupported: ${isSupported}`}\n                </div>\n                <div>\n                  {`Err: ${errMsg}`}\n                </div>\n              </div>\n            )}\n          </DeviceOrientation>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}